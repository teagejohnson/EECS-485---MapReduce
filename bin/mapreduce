#!/bin/bash

set -Eeuo pipefail


# Sanity check command line options
usage() {
  echo "Usage: $0 (start|stop|status)"
}

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

stop_server() {
    echo "stopping mapreduce ..."

    mapreduce-submit --shutdown --host localhost --port 6000 || true
    sleep 2  # give the Manager time to receive signal and send to Workers

    if pgrep -f mapreduce-manager &> /dev/null; then
        echo "killing mapreduce manager ..."
        pkill -f mapreduce-manager || true
    fi
    if pgrep -f mapreduce-worker &> /dev/null; then
        echo "killing mapreduce worker ..."
        pkill -f mapreduce-worker || true
    fi
}

start_server() {
    echo "starting mapreduce ... " 
    mkdir -p var/log
    rm -f var/log/manager.log var/log/worker-6002.log var/log/worker-6001.log
    mapreduce-manager --host localhost --port 6000 --logfile var/log/manager.log &
    sleep 2  # give the Manager time to start
    mapreduce-worker --host localhost --port 6001 --manager-host localhost --manager-port 6000 --logfile var/log/worker-6001.log &
    mapreduce-worker --host localhost --port 6002 --manager-host localhost --manager-port 6000 --logfile var/log/worker-6002.log &
}

case $1 in
    "start")
        #check if the server is already running
        if pgrep -f mapreduce-manager &> /dev/null; then  
            echo "Error: mapreduce-manager is already running"
            exit 1
        fi

        if pgrep -f mapreduce-worker &> /dev/null; then
            echo "Error: mapreduce-worker is already running"
            exit 1
        fi

        start_server
        ;;
    
    "stop")
        stop_server
        ;;

    "status")
        if pgrep -f mapreduce-manager &> /dev/null; then  
            echo "manager running"
        fi

        if pgrep -f mapreduce-worker &> /dev/null; then
            echo "workers running"
            exit 1
        fi 
        ;;
    
    "reset")
        stop_server
        start_server
        ;;
esac